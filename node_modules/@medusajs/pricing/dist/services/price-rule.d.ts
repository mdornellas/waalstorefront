import { Context, DAL, FindConfig, PricingTypes } from "@medusajs/types";
import { PriceRule } from "../models";
type InjectedDependencies = {
    priceRuleRepository: DAL.RepositoryService;
};
export default class PriceRuleService<TEntity extends PriceRule = PriceRule> {
    protected readonly priceRuleRepository_: DAL.RepositoryService;
    constructor({ priceRuleRepository }: InjectedDependencies);
    retrieve(priceRuleId: string, config?: FindConfig<PricingTypes.PriceRuleDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: PricingTypes.FilterablePriceRuleProps, config?: FindConfig<PricingTypes.PriceRuleDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: PricingTypes.FilterablePriceRuleProps, config?: FindConfig<PricingTypes.PriceRuleDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    create(data: PricingTypes.CreatePriceRuleDTO[], sharedContext?: Context): Promise<TEntity[]>;
    update(data: PricingTypes.UpdatePriceRuleDTO[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
}
export {};
