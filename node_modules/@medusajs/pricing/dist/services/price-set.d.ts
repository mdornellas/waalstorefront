import { Context, DAL, FindConfig, PricingTypes } from "@medusajs/types";
import { PriceSet } from "../models";
type InjectedDependencies = {
    priceSetRepository: DAL.RepositoryService;
};
export default class PriceSetService<TEntity extends PriceSet = PriceSet> {
    protected readonly priceSetRepository_: DAL.RepositoryService;
    constructor({ priceSetRepository }: InjectedDependencies);
    retrieve(priceSetId: string, config?: FindConfig<PricingTypes.PriceSetDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: PricingTypes.FilterablePriceSetProps, config?: FindConfig<PricingTypes.PriceSetDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: PricingTypes.FilterablePriceSetProps, config?: FindConfig<PricingTypes.PriceSetDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    create(data: Omit<PricingTypes.CreatePriceSetDTO, "rules">[], sharedContext?: Context): Promise<TEntity[]>;
    update(data: Omit<PricingTypes.UpdatePriceSetDTO, "rules">[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
}
export {};
