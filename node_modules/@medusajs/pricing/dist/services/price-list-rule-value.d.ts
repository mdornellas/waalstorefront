import { Context, DAL, FindConfig, PricingTypes } from "@medusajs/types";
import { PriceListRuleValue } from "../models";
import { CreatePriceListRuleValueDTO } from "../types";
type InjectedDependencies = {
    priceListRuleValueRepository: DAL.RepositoryService;
};
export default class PriceListRuleValueService<TEntity extends PriceListRuleValue = PriceListRuleValue> {
    protected readonly priceListRuleValueRepository_: DAL.RepositoryService;
    constructor({ priceListRuleValueRepository }: InjectedDependencies);
    retrieve(priceSetId: string, config?: FindConfig<PricingTypes.PriceListRuleValueDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: PricingTypes.FilterablePriceListRuleValueProps, config?: FindConfig<PricingTypes.PriceListRuleValueDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: PricingTypes.FilterablePriceListRuleValueProps, config?: FindConfig<PricingTypes.PriceListRuleValueDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    create(data: CreatePriceListRuleValueDTO[], sharedContext?: Context): Promise<TEntity[]>;
    update(data: PricingTypes.UpdatePriceListRuleValueDTO[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
}
export {};
