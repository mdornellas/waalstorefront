import { AddPricesDTO, Context, DAL, FindConfig, InternalModuleDeclaration, ModuleJoinerConfig, PriceSetDTO, PricingContext, PricingFilters, PricingTypes } from "@medusajs/types";
import { Currency, MoneyAmount, PriceList, PriceListRule, PriceListRuleValue, PriceRule, PriceSet, PriceSetMoneyAmount, PriceSetMoneyAmountRules, PriceSetRuleType, RuleType } from "../models";
import { CurrencyService, MoneyAmountService, PriceListRuleService, PriceListRuleValueService, PriceListService, PriceRuleService, PriceSetMoneyAmountRulesService, PriceSetMoneyAmountService, PriceSetRuleTypeService, PriceSetService, RuleTypeService } from ".";
import { PricingRepositoryService } from "../types";
type InjectedDependencies = {
    baseRepository: DAL.RepositoryService;
    pricingRepository: PricingRepositoryService;
    currencyService: CurrencyService<any>;
    moneyAmountService: MoneyAmountService<any>;
    priceSetService: PriceSetService<any>;
    priceSetMoneyAmountRulesService: PriceSetMoneyAmountRulesService<any>;
    ruleTypeService: RuleTypeService<any>;
    priceRuleService: PriceRuleService<any>;
    priceSetRuleTypeService: PriceSetRuleTypeService<any>;
    priceSetMoneyAmountService: PriceSetMoneyAmountService<any>;
    priceListService: PriceListService<any>;
    priceListRuleService: PriceListRuleService<any>;
    priceListRuleValueService: PriceListRuleValueService<any>;
};
export default class PricingModuleService<TPriceSet extends PriceSet = PriceSet, TMoneyAmount extends MoneyAmount = MoneyAmount, TCurrency extends Currency = Currency, TRuleType extends RuleType = RuleType, TPriceSetMoneyAmountRules extends PriceSetMoneyAmountRules = PriceSetMoneyAmountRules, TPriceRule extends PriceRule = PriceRule, TPriceSetRuleType extends PriceSetRuleType = PriceSetRuleType, TPriceSetMoneyAmount extends PriceSetMoneyAmount = PriceSetMoneyAmount, TPriceList extends PriceList = PriceList, TPriceListRule extends PriceListRule = PriceListRule, TPriceListRuleValue extends PriceListRuleValue = PriceListRuleValue> implements PricingTypes.IPricingModuleService {
    protected readonly moduleDeclaration: InternalModuleDeclaration;
    protected baseRepository_: DAL.RepositoryService;
    protected readonly pricingRepository_: PricingRepositoryService;
    protected readonly currencyService_: CurrencyService<TCurrency>;
    protected readonly moneyAmountService_: MoneyAmountService<TMoneyAmount>;
    protected readonly ruleTypeService_: RuleTypeService<TRuleType>;
    protected readonly priceSetService_: PriceSetService<TPriceSet>;
    protected readonly priceSetMoneyAmountRulesService_: PriceSetMoneyAmountRulesService<TPriceSetMoneyAmountRules>;
    protected readonly priceRuleService_: PriceRuleService<TPriceRule>;
    protected readonly priceSetRuleTypeService_: PriceSetRuleTypeService<TPriceSetRuleType>;
    protected readonly priceSetMoneyAmountService_: PriceSetMoneyAmountService<TPriceSetMoneyAmount>;
    protected readonly priceListService_: PriceListService<TPriceList>;
    protected readonly priceListRuleService_: PriceListRuleService<TPriceListRule>;
    protected readonly priceListRuleValueService_: PriceListRuleValueService<TPriceListRuleValue>;
    constructor({ baseRepository, pricingRepository, moneyAmountService, currencyService, ruleTypeService, priceSetService, priceSetMoneyAmountRulesService, priceRuleService, priceSetRuleTypeService, priceSetMoneyAmountService, priceListService, priceListRuleService, priceListRuleValueService, }: InjectedDependencies, moduleDeclaration: InternalModuleDeclaration);
    __joinerConfig(): ModuleJoinerConfig;
    calculatePrices(pricingFilters: PricingFilters, pricingContext?: PricingContext, sharedContext?: Context): Promise<PricingTypes.CalculatedPriceSetDTO>;
    retrieve(id: string, config?: FindConfig<PricingTypes.PriceSetDTO>, sharedContext?: Context): Promise<PricingTypes.PriceSetDTO>;
    list(filters?: PricingTypes.FilterablePriceSetProps, config?: FindConfig<PricingTypes.PriceSetDTO>, sharedContext?: Context): Promise<PricingTypes.PriceSetDTO[]>;
    listAndCount(filters?: PricingTypes.FilterablePriceSetProps, config?: FindConfig<PricingTypes.PriceSetDTO>, sharedContext?: Context): Promise<[PricingTypes.PriceSetDTO[], number]>;
    create(data: PricingTypes.CreatePriceSetDTO, sharedContext?: Context): Promise<PriceSetDTO>;
    create(data: PricingTypes.CreatePriceSetDTO[], sharedContext?: Context): Promise<PriceSetDTO[]>;
    protected create_(data: PricingTypes.CreatePriceSetDTO[], sharedContext?: Context): Promise<TPriceSet[]>;
    addRules(data: PricingTypes.AddRulesDTO, sharedContext?: Context): Promise<PricingTypes.PriceSetDTO>;
    addRules(data: PricingTypes.AddRulesDTO[], sharedContext?: Context): Promise<PricingTypes.PriceSetDTO[]>;
    protected addRules_(inputs: PricingTypes.AddRulesDTO[], sharedContext?: Context): Promise<PricingTypes.PriceSetDTO[]>;
    addPrices(data: AddPricesDTO, sharedContext?: Context): Promise<PricingTypes.PriceSetDTO>;
    addPrices(data: AddPricesDTO[], sharedContext?: Context): Promise<PricingTypes.PriceSetDTO[]>;
    protected addPrices_(input: AddPricesDTO[], sharedContext?: Context): Promise<void>;
    removeRules(data: PricingTypes.RemovePriceSetRulesDTO[], sharedContext?: Context): Promise<void>;
    update(data: PricingTypes.UpdatePriceSetDTO[], sharedContext?: Context): Promise<PriceSetDTO[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
    retrieveMoneyAmount(id: string, config?: FindConfig<PricingTypes.MoneyAmountDTO>, sharedContext?: Context): Promise<PricingTypes.MoneyAmountDTO>;
    listMoneyAmounts(filters?: PricingTypes.FilterableMoneyAmountProps, config?: FindConfig<PricingTypes.MoneyAmountDTO>, sharedContext?: Context): Promise<PricingTypes.MoneyAmountDTO[]>;
    listAndCountMoneyAmounts(filters?: PricingTypes.FilterableMoneyAmountProps, config?: FindConfig<PricingTypes.MoneyAmountDTO>, sharedContext?: Context): Promise<[PricingTypes.MoneyAmountDTO[], number]>;
    createMoneyAmounts(data: PricingTypes.CreateMoneyAmountDTO[], sharedContext?: Context): Promise<PricingTypes.MoneyAmountDTO[]>;
    updateMoneyAmounts(data: PricingTypes.UpdateMoneyAmountDTO[], sharedContext?: Context): Promise<PricingTypes.MoneyAmountDTO[]>;
    deleteMoneyAmounts(ids: string[], sharedContext?: Context): Promise<void>;
    retrieveCurrency(code: string, config?: FindConfig<PricingTypes.CurrencyDTO>, sharedContext?: Context): Promise<PricingTypes.CurrencyDTO>;
    listCurrencies(filters?: PricingTypes.FilterableCurrencyProps, config?: FindConfig<PricingTypes.CurrencyDTO>, sharedContext?: Context): Promise<PricingTypes.CurrencyDTO[]>;
    listAndCountCurrencies(filters?: PricingTypes.FilterableCurrencyProps, config?: FindConfig<PricingTypes.CurrencyDTO>, sharedContext?: Context): Promise<[PricingTypes.CurrencyDTO[], number]>;
    createCurrencies(data: PricingTypes.CreateCurrencyDTO[], sharedContext?: Context): Promise<PricingTypes.CurrencyDTO[]>;
    updateCurrencies(data: PricingTypes.UpdateCurrencyDTO[], sharedContext?: Context): Promise<PricingTypes.CurrencyDTO[]>;
    deleteCurrencies(currencyCodes: string[], sharedContext?: Context): Promise<void>;
    retrieveRuleType(id: string, config?: FindConfig<PricingTypes.RuleTypeDTO>, sharedContext?: Context): Promise<PricingTypes.RuleTypeDTO>;
    listRuleTypes(filters?: PricingTypes.FilterableRuleTypeProps, config?: FindConfig<PricingTypes.RuleTypeDTO>, sharedContext?: Context): Promise<PricingTypes.RuleTypeDTO[]>;
    listAndCountRuleTypes(filters?: PricingTypes.FilterableRuleTypeProps, config?: FindConfig<PricingTypes.RuleTypeDTO>, sharedContext?: Context): Promise<[PricingTypes.RuleTypeDTO[], number]>;
    createRuleTypes(data: PricingTypes.CreateRuleTypeDTO[], sharedContext?: Context): Promise<PricingTypes.RuleTypeDTO[]>;
    updateRuleTypes(data: PricingTypes.UpdateRuleTypeDTO[], sharedContext?: Context): Promise<PricingTypes.RuleTypeDTO[]>;
    deleteRuleTypes(ruleTypeIds: string[], sharedContext?: Context): Promise<void>;
    retrievePriceSetMoneyAmountRules(id: string, config?: FindConfig<PricingTypes.PriceSetMoneyAmountRulesDTO>, sharedContext?: Context): Promise<PricingTypes.PriceSetMoneyAmountRulesDTO>;
    listPriceSetMoneyAmountRules(filters?: PricingTypes.FilterablePriceSetMoneyAmountRulesProps, config?: FindConfig<PricingTypes.PriceSetMoneyAmountRulesDTO>, sharedContext?: Context): Promise<PricingTypes.PriceSetMoneyAmountRulesDTO[]>;
    listAndCountPriceSetMoneyAmountRules(filters?: PricingTypes.FilterablePriceSetMoneyAmountRulesProps, config?: FindConfig<PricingTypes.PriceSetMoneyAmountRulesDTO>, sharedContext?: Context): Promise<[PricingTypes.PriceSetMoneyAmountRulesDTO[], number]>;
    listPriceSetMoneyAmounts(filters?: PricingTypes.FilterablePriceSetMoneyAmountProps, config?: FindConfig<PricingTypes.PriceSetMoneyAmountDTO>, sharedContext?: Context): Promise<PricingTypes.PriceSetMoneyAmountDTO[]>;
    listAndCountPriceSetMoneyAmounts(filters?: PricingTypes.FilterablePriceSetMoneyAmountProps, config?: FindConfig<PricingTypes.PriceSetMoneyAmountDTO>, sharedContext?: Context): Promise<[PricingTypes.PriceSetMoneyAmountDTO[], number]>;
    createPriceSetMoneyAmountRules(data: PricingTypes.CreatePriceSetMoneyAmountRulesDTO[], sharedContext?: Context): Promise<PricingTypes.PriceSetMoneyAmountRulesDTO[]>;
    updatePriceSetMoneyAmountRules(data: PricingTypes.UpdatePriceSetMoneyAmountRulesDTO[], sharedContext?: Context): Promise<PricingTypes.PriceSetMoneyAmountRulesDTO[]>;
    deletePriceSetMoneyAmountRules(ids: string[], sharedContext?: Context): Promise<void>;
    retrievePriceRule(id: string, config?: FindConfig<PricingTypes.PriceRuleDTO>, sharedContext?: Context): Promise<PricingTypes.PriceRuleDTO>;
    listPriceRules(filters?: PricingTypes.FilterablePriceRuleProps, config?: FindConfig<PricingTypes.PriceRuleDTO>, sharedContext?: Context): Promise<PricingTypes.PriceRuleDTO[]>;
    listAndCountPriceRules(filters?: PricingTypes.FilterablePriceRuleProps, config?: FindConfig<PricingTypes.PriceRuleDTO>, sharedContext?: Context): Promise<[PricingTypes.PriceRuleDTO[], number]>;
    createPriceRules(data: PricingTypes.CreatePriceRuleDTO[], sharedContext?: Context): Promise<PricingTypes.PriceRuleDTO[]>;
    updatePriceRules(data: PricingTypes.UpdatePriceRuleDTO[], sharedContext?: Context): Promise<PricingTypes.PriceRuleDTO[]>;
    deletePriceRules(priceRuleIds: string[], sharedContext?: Context): Promise<void>;
    retrievePriceList(id: string, config?: FindConfig<PricingTypes.PriceListDTO>, sharedContext?: Context): Promise<PricingTypes.PriceListDTO>;
    listPriceLists(filters?: PricingTypes.FilterablePriceListProps, config?: FindConfig<PricingTypes.PriceListDTO>, sharedContext?: Context): Promise<PricingTypes.PriceListDTO[]>;
    listAndCountPriceLists(filters?: PricingTypes.FilterablePriceListProps, config?: FindConfig<PricingTypes.PriceListDTO>, sharedContext?: Context): Promise<[PricingTypes.PriceListDTO[], number]>;
    createPriceLists(data: PricingTypes.CreatePriceListDTO[], sharedContext?: Context): Promise<PricingTypes.PriceListDTO[]>;
    protected createPriceLists_(data: PricingTypes.CreatePriceListDTO[], sharedContext?: Context): Promise<PricingTypes.PriceListDTO[]>;
    updatePriceLists(data: PricingTypes.UpdatePriceListDTO[], sharedContext?: Context): Promise<PricingTypes.PriceListDTO[]>;
    protected updatePriceLists_(data: PricingTypes.UpdatePriceListDTO[], sharedContext?: Context): Promise<PricingTypes.PriceListDTO[]>;
    deletePriceLists(priceListIds: string[], sharedContext?: Context): Promise<void>;
    retrievePriceListRule(id: string, config?: FindConfig<PricingTypes.PriceListRuleDTO>, sharedContext?: Context): Promise<PricingTypes.PriceListRuleDTO>;
    listPriceListRules(filters?: PricingTypes.FilterablePriceListRuleProps, config?: FindConfig<PricingTypes.PriceListRuleDTO>, sharedContext?: Context): Promise<PricingTypes.PriceListRuleDTO[]>;
    listAndCountPriceListRules(filters?: PricingTypes.FilterablePriceListRuleProps, config?: FindConfig<PricingTypes.PriceListRuleDTO>, sharedContext?: Context): Promise<[PricingTypes.PriceListRuleDTO[], number]>;
    createPriceListRules(data: PricingTypes.CreatePriceListRuleDTO[], sharedContext?: Context): Promise<PricingTypes.PriceListRuleDTO[]>;
    createPriceListRules_(data: PricingTypes.CreatePriceListRuleDTO[], sharedContext?: Context): Promise<TPriceListRule[]>;
    updatePriceListRules(data: PricingTypes.UpdatePriceListRuleDTO[], sharedContext?: Context): Promise<PricingTypes.PriceListRuleDTO[]>;
    deletePriceListRules(priceListRuleIds: string[], sharedContext?: Context): Promise<void>;
    addPriceListPrices(data: PricingTypes.AddPriceListPricesDTO[], sharedContext?: Context): Promise<PricingTypes.PriceListDTO[]>;
    protected addPriceListPrices_(data: PricingTypes.AddPriceListPricesDTO[], sharedContext?: Context): Promise<PricingTypes.PriceListDTO[]>;
    setPriceListRules(data: PricingTypes.SetPriceListRulesDTO, sharedContext?: Context): Promise<PricingTypes.PriceListDTO>;
    protected setPriceListRules_(data: PricingTypes.SetPriceListRulesDTO[], sharedContext?: Context): Promise<PricingTypes.PriceListDTO[]>;
    removePriceListRules(data: PricingTypes.RemovePriceListRulesDTO, sharedContext?: Context): Promise<PricingTypes.PriceListDTO>;
    protected removePriceListRules_(data: PricingTypes.RemovePriceListRulesDTO[], sharedContext?: Context): Promise<PricingTypes.PriceListDTO[]>;
}
export {};
