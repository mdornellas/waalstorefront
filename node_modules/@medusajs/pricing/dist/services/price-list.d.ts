import { Context, DAL, FindConfig, PricingTypes } from "@medusajs/types";
import { PriceList } from "../models";
import { CreatePriceListDTO } from "../types";
type InjectedDependencies = {
    priceListRepository: DAL.RepositoryService;
};
export default class PriceListService<TEntity extends PriceList = PriceList> {
    protected readonly priceListRepository_: DAL.RepositoryService;
    constructor({ priceListRepository }: InjectedDependencies);
    retrieve(priceListId: string, config?: FindConfig<PricingTypes.PriceListDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: PricingTypes.FilterablePriceListProps, config?: FindConfig<PricingTypes.PriceListDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: PricingTypes.FilterablePriceListProps, config?: FindConfig<PricingTypes.PriceListDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    create(data: CreatePriceListDTO[], sharedContext?: Context): Promise<TEntity[]>;
    update(data: Omit<PricingTypes.UpdatePriceListDTO, "rules">[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
}
export {};
