import { Context, DAL, FindConfig, PricingTypes } from "@medusajs/types";
import { PriceListRule } from "../models";
type InjectedDependencies = {
    priceListRuleRepository: DAL.RepositoryService;
};
export default class PriceListRuleService<TEntity extends PriceListRule = PriceListRule> {
    protected readonly priceListRuleRepository_: DAL.RepositoryService;
    constructor({ priceListRuleRepository }: InjectedDependencies);
    retrieve(priceSetId: string, config?: FindConfig<PricingTypes.PriceListRuleDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: PricingTypes.FilterablePriceListRuleProps, config?: FindConfig<PricingTypes.PriceListRuleDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: PricingTypes.FilterablePriceListRuleProps, config?: FindConfig<PricingTypes.PriceListRuleDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    create(data: PricingTypes.CreatePriceListRuleDTO[], sharedContext?: Context): Promise<TEntity[]>;
    update(data: PricingTypes.UpdatePriceListRuleDTO[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
}
export {};
