import { Context, DAL, FindConfig, PricingTypes } from "@medusajs/types";
import { PriceSetMoneyAmountRules } from "../models";
type InjectedDependencies = {
    priceSetMoneyAmountRulesRepository: DAL.RepositoryService;
};
export default class PriceSetMoneyAmountRulesService<TEntity extends PriceSetMoneyAmountRules = PriceSetMoneyAmountRules> {
    protected readonly priceSetMoneyAmountRulesRepository_: DAL.RepositoryService;
    constructor({ priceSetMoneyAmountRulesRepository }: InjectedDependencies);
    retrieve(priceSetMoneyAmountRulesId: string, config?: FindConfig<PricingTypes.PriceSetMoneyAmountRulesDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: PricingTypes.FilterablePriceSetMoneyAmountRulesProps, config?: FindConfig<PricingTypes.PriceSetMoneyAmountRulesDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: PricingTypes.FilterablePriceSetMoneyAmountRulesProps, config?: FindConfig<PricingTypes.PriceSetMoneyAmountRulesDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    private buildQueryForList;
    create(data: PricingTypes.CreatePriceSetMoneyAmountRulesDTO[], sharedContext?: Context): Promise<TEntity[]>;
    update(data: PricingTypes.UpdatePriceSetMoneyAmountRulesDTO[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
}
export {};
