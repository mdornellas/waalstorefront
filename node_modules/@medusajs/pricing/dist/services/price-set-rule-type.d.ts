import { Context, DAL, FindConfig, PricingTypes } from "@medusajs/types";
import { PriceSetRuleType } from "../models";
type InjectedDependencies = {
    priceSetRuleTypeRepository: DAL.RepositoryService;
};
export default class PriceSetRuleTypeService<TEntity extends PriceSetRuleType = PriceSetRuleType> {
    protected readonly priceSetRuleTypeRepository_: DAL.RepositoryService;
    constructor({ priceSetRuleTypeRepository }: InjectedDependencies);
    retrieve(priceSetId: string, config?: FindConfig<PricingTypes.PriceSetRuleTypeDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: PricingTypes.FilterablePriceSetRuleTypeProps, config?: FindConfig<PricingTypes.PriceSetDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: PricingTypes.FilterablePriceSetRuleTypeProps, config?: FindConfig<PricingTypes.PriceSetDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    private buildQueryForList;
    create(data: PricingTypes.CreatePriceSetRuleTypeDTO[], sharedContext?: Context): Promise<TEntity[]>;
    update(data: PricingTypes.UpdatePriceSetRuleTypeDTO[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
}
export {};
