import { Context, DAL, FindConfig, PricingTypes } from "@medusajs/types";
import { RuleType } from "../models";
type InjectedDependencies = {
    ruleTypeRepository: DAL.RepositoryService;
};
export default class RuleTypeService<TEntity extends RuleType = RuleType> {
    protected readonly ruleTypeRepository_: DAL.RepositoryService;
    constructor({ ruleTypeRepository }: InjectedDependencies);
    retrieve(ruleTypeId: string, config?: FindConfig<PricingTypes.RuleTypeDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: PricingTypes.FilterableRuleTypeProps, config?: FindConfig<PricingTypes.RuleTypeDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: PricingTypes.FilterableRuleTypeProps, config?: FindConfig<PricingTypes.RuleTypeDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    create(data: PricingTypes.CreateRuleTypeDTO[], sharedContext?: Context): Promise<TEntity[]>;
    update(data: PricingTypes.UpdateRuleTypeDTO[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
}
export {};
