import { Context, DAL, FindConfig, PricingTypes } from "@medusajs/types";
import { Currency } from "../models";
type InjectedDependencies = {
    currencyRepository: DAL.RepositoryService;
};
export default class CurrencyService<TEntity extends Currency = Currency> {
    protected readonly currencyRepository_: DAL.RepositoryService;
    constructor({ currencyRepository }: InjectedDependencies);
    retrieve(currencyCode: string, config?: FindConfig<PricingTypes.CurrencyDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: PricingTypes.FilterableCurrencyProps, config?: FindConfig<PricingTypes.CurrencyDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: PricingTypes.FilterableCurrencyProps, config?: FindConfig<PricingTypes.CurrencyDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    private buildQueryForList;
    create(data: PricingTypes.CreateCurrencyDTO[], sharedContext?: Context): Promise<TEntity[]>;
    update(data: PricingTypes.UpdateCurrencyDTO[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
}
export {};
