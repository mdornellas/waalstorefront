import { Context, DAL, FindConfig, PricingTypes } from "@medusajs/types";
import { MoneyAmount } from "../models";
type InjectedDependencies = {
    moneyAmountRepository: DAL.RepositoryService;
};
export default class MoneyAmountService<TEntity extends MoneyAmount = MoneyAmount> {
    protected readonly moneyAmountRepository_: DAL.RepositoryService;
    constructor({ moneyAmountRepository }: InjectedDependencies);
    retrieve(moneyAmountId: string, config?: FindConfig<PricingTypes.MoneyAmountDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: PricingTypes.FilterableMoneyAmountProps, config?: FindConfig<PricingTypes.MoneyAmountDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: PricingTypes.FilterableMoneyAmountProps, config?: FindConfig<PricingTypes.MoneyAmountDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    create(data: PricingTypes.CreateMoneyAmountDTO[], sharedContext?: Context): Promise<TEntity[]>;
    update(data: PricingTypes.UpdateMoneyAmountDTO[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
}
export {};
