"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriceSetRuleTypeRepository = void 0;
const utils_1 = require("@medusajs/utils");
const core_1 = require("@mikro-orm/core");
const _models_1 = require("../models");
class PriceSetRuleTypeRepository extends utils_1.DALUtils.MikroOrmBaseRepository {
    constructor({ manager }) {
        // @ts-ignore
        // eslint-disable-next-line prefer-rest-params
        super(...arguments);
        this.manager_ = manager;
    }
    async find(findOptions = { where: {} }, context = {}) {
        const manager = this.getActiveManager(context);
        const findOptions_ = { ...findOptions };
        findOptions_.options ?? (findOptions_.options = {});
        Object.assign(findOptions_.options, {
            strategy: core_1.LoadStrategy.SELECT_IN,
        });
        return await manager.find(_models_1.PriceSetRuleType, findOptions_.where, findOptions_.options);
    }
    async findAndCount(findOptions = { where: {} }, context = {}) {
        const manager = this.getActiveManager(context);
        const findOptions_ = { ...findOptions };
        findOptions_.options ?? (findOptions_.options = {});
        Object.assign(findOptions_.options, {
            strategy: core_1.LoadStrategy.SELECT_IN,
        });
        return await manager.findAndCount(_models_1.PriceSetRuleType, findOptions_.where, findOptions_.options);
    }
    async delete(ids, context = {}) {
        const manager = this.getActiveManager(context);
        await manager.nativeDelete(_models_1.PriceSetRuleType, { id: { $in: ids } }, {});
    }
    async create(data, context = {}) {
        const manager = this.getActiveManager(context);
        const priceSets = data.map((priceSetData) => {
            return manager.create(_models_1.PriceSetRuleType, priceSetData);
        });
        manager.persist(priceSets);
        return priceSets;
    }
    async update(data, context = {}) {
        const manager = this.getActiveManager(context);
        const priceSetIds = data.map((priceSetData) => priceSetData.id);
        const existingPriceSets = await this.find({
            where: {
                id: {
                    $in: priceSetIds,
                },
            },
        }, context);
        const existingPriceSetMap = new Map(existingPriceSets.map((priceSet) => [
            priceSet.id,
            priceSet,
        ]));
        const priceSets = data.map((priceSetData) => {
            const existingPriceSet = existingPriceSetMap.get(priceSetData.id);
            if (!existingPriceSet) {
                throw new utils_1.MedusaError(utils_1.MedusaError.Types.NOT_FOUND, `PriceSetRuleType with id "${priceSetData.id}" not found`);
            }
            return manager.assign(existingPriceSet, priceSetData);
        });
        manager.persist(priceSets);
        return priceSets;
    }
}
exports.PriceSetRuleTypeRepository = PriceSetRuleTypeRepository;
