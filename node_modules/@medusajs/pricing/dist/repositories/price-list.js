"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriceListRepository = void 0;
const utils_1 = require("@medusajs/utils");
const core_1 = require("@mikro-orm/core");
const _models_1 = require("../models");
class PriceListRepository extends utils_1.DALUtils.MikroOrmBaseRepository {
    constructor({ manager }) {
        // @ts-ignore
        // eslint-disable-next-line prefer-rest-params
        super(...arguments);
        this.manager_ = manager;
    }
    async find(findOptions = { where: {} }, context = {}) {
        const manager = this.getActiveManager(context);
        const findOptions_ = { ...findOptions };
        findOptions_.options ?? (findOptions_.options = {});
        Object.assign(findOptions_.options, {
            strategy: core_1.LoadStrategy.SELECT_IN,
        });
        return await manager.find(_models_1.PriceList, findOptions_.where, findOptions_.options);
    }
    async findAndCount(findOptions = { where: {} }, context = {}) {
        const manager = this.getActiveManager(context);
        const findOptions_ = { ...findOptions };
        findOptions_.options ?? (findOptions_.options = {});
        Object.assign(findOptions_.options, {
            strategy: core_1.LoadStrategy.SELECT_IN,
        });
        return await manager.findAndCount(_models_1.PriceList, findOptions_.where, findOptions_.options);
    }
    async delete(ids, context = {}) {
        const manager = this.getActiveManager(context);
        await manager.nativeDelete(_models_1.PriceList, { id: { $in: ids } }, {});
    }
    async create(data, context = {}) {
        const manager = this.getActiveManager(context);
        const priceLists = data.map((priceListData) => {
            return manager.create(_models_1.PriceList, priceListData);
        });
        manager.persist(priceLists);
        return priceLists;
    }
    async update(data, context = {}) {
        const manager = this.getActiveManager(context);
        const priceListIds = data.map((priceListData) => priceListData.id);
        const existingPriceLists = await this.find({
            where: {
                id: {
                    $in: priceListIds,
                },
            },
        }, context);
        const existingPriceListMap = new Map(existingPriceLists.map((priceList) => [
            priceList.id,
            priceList,
        ]));
        const priceLists = data.map((priceListData) => {
            const existingPriceList = existingPriceListMap.get(priceListData.id);
            if (!existingPriceList) {
                throw new utils_1.MedusaError(utils_1.MedusaError.Types.NOT_FOUND, `PriceList with id "${priceListData.id}" not found`);
            }
            if (!!priceListData.starts_at) {
                priceListData.starts_at = new Date(priceListData.starts_at).toISOString();
            }
            if (!!priceListData.ends_at) {
                priceListData.ends_at = new Date(priceListData.ends_at).toISOString();
            }
            return manager.assign(existingPriceList, priceListData);
        });
        manager.persist(priceLists);
        return priceLists;
    }
}
exports.PriceListRepository = PriceListRepository;
