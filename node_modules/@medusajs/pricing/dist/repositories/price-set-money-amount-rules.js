"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriceSetMoneyAmountRulesRepository = void 0;
const utils_1 = require("@medusajs/utils");
const core_1 = require("@mikro-orm/core");
const _models_1 = require("../models");
class PriceSetMoneyAmountRulesRepository extends utils_1.DALUtils.MikroOrmBaseRepository {
    constructor({ manager }) {
        // @ts-ignore
        // eslint-disable-next-line prefer-rest-params
        super(...arguments);
        this.manager_ = manager;
    }
    async find(findOptions = { where: {} }, context = {}) {
        const manager = this.getActiveManager(context);
        const findOptions_ = { ...findOptions };
        findOptions_.options ?? (findOptions_.options = {});
        Object.assign(findOptions_.options, {
            strategy: core_1.LoadStrategy.SELECT_IN,
        });
        return await manager.find(_models_1.PriceSetMoneyAmountRules, findOptions_.where, findOptions_.options);
    }
    async findAndCount(findOptions = { where: {} }, context = {}) {
        const manager = this.getActiveManager(context);
        const findOptions_ = { ...findOptions };
        findOptions_.options ?? (findOptions_.options = {});
        Object.assign(findOptions_.options, {
            strategy: core_1.LoadStrategy.SELECT_IN,
        });
        return await manager.findAndCount(_models_1.PriceSetMoneyAmountRules, findOptions_.where, findOptions_.options);
    }
    async delete(ids, context = {}) {
        const manager = this.getActiveManager(context);
        await manager.nativeDelete(_models_1.PriceSetMoneyAmountRules, { id: { $in: ids } });
    }
    async create(data, context = {}) {
        const manager = this.getActiveManager(context);
        const psmar = data.map((psmarData) => {
            return manager.create(_models_1.PriceSetMoneyAmountRules, psmarData);
        });
        manager.persist(psmar);
        return psmar;
    }
    async update(data, context = {}) {
        const manager = this.getActiveManager(context);
        const psmarIds = data.map((psmar) => psmar.id);
        const existingRecords = await this.find({
            where: {
                id: {
                    $in: psmarIds,
                },
            },
        }, context);
        const psmarMap = new Map(existingRecords.map((psmar) => [
            psmar.id,
            psmar,
        ]));
        const psmar = data.map((psmarData) => {
            const existingRecord = psmarMap.get(psmarData.id);
            if (!existingRecord) {
                throw new utils_1.MedusaError(utils_1.MedusaError.Types.NOT_FOUND, `PriceSetMoneyAmountRules with id "${psmarData.id}" not found`);
            }
            return manager.assign(existingRecord, psmarData);
        });
        manager.persist(psmar);
        return psmar;
    }
}
exports.PriceSetMoneyAmountRulesRepository = PriceSetMoneyAmountRulesRepository;
