"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@medusajs/utils");
const core_1 = require("@mikro-orm/core");
const currency_1 = __importDefault(require("./currency"));
const index_1 = require("./index");
const price_set_1 = __importDefault(require("./price-set"));
let MoneyAmount = class MoneyAmount {
    constructor() {
        this.price_sets = new core_1.Collection(this);
    }
    onCreate() {
        this.id = (0, utils_1.generateEntityId)(this.id, "ma");
    }
};
__decorate([
    (0, core_1.PrimaryKey)({ columnType: "text" }),
    __metadata("design:type", String)
], MoneyAmount.prototype, "id", void 0);
__decorate([
    (0, core_1.Property)({ columnType: "text", nullable: true }),
    __metadata("design:type", String)
], MoneyAmount.prototype, "currency_code", void 0);
__decorate([
    (0, core_1.ManyToMany)({
        entity: () => price_set_1.default,
        mappedBy: (ps) => ps.money_amounts,
    }),
    __metadata("design:type", Object)
], MoneyAmount.prototype, "price_sets", void 0);
__decorate([
    (0, core_1.OneToOne)({
        entity: () => index_1.PriceSetMoneyAmount,
        mappedBy: (psma) => psma.money_amount,
    }),
    __metadata("design:type", index_1.PriceSetMoneyAmount)
], MoneyAmount.prototype, "price_set_money_amount", void 0);
__decorate([
    (0, core_1.ManyToOne)(() => currency_1.default, {
        nullable: true,
        index: "IDX_money_amount_currency_code",
        fieldName: "currency_code",
    }),
    __metadata("design:type", currency_1.default)
], MoneyAmount.prototype, "currency", void 0);
__decorate([
    (0, core_1.Property)({ columnType: "numeric", nullable: true, serializer: Number }),
    __metadata("design:type", Number)
], MoneyAmount.prototype, "amount", void 0);
__decorate([
    (0, core_1.Property)({ columnType: "numeric", nullable: true }),
    __metadata("design:type", Object)
], MoneyAmount.prototype, "min_quantity", void 0);
__decorate([
    (0, core_1.Property)({ columnType: "numeric", nullable: true }),
    __metadata("design:type", Object)
], MoneyAmount.prototype, "max_quantity", void 0);
__decorate([
    (0, core_1.Property)({
        onCreate: () => new Date(),
        columnType: "timestamptz",
        defaultRaw: "now()",
    }),
    __metadata("design:type", Date)
], MoneyAmount.prototype, "created_at", void 0);
__decorate([
    (0, core_1.Property)({
        onCreate: () => new Date(),
        onUpdate: () => new Date(),
        columnType: "timestamptz",
        defaultRaw: "now()",
    }),
    __metadata("design:type", Date)
], MoneyAmount.prototype, "updated_at", void 0);
__decorate([
    (0, core_1.Index)({ name: "IDX_money_amount_deleted_at" }),
    (0, core_1.Property)({ columnType: "timestamptz", nullable: true }),
    __metadata("design:type", Date)
], MoneyAmount.prototype, "deleted_at", void 0);
__decorate([
    (0, core_1.BeforeCreate)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MoneyAmount.prototype, "onCreate", null);
MoneyAmount = __decorate([
    (0, core_1.Entity)()
], MoneyAmount);
exports.default = MoneyAmount;
