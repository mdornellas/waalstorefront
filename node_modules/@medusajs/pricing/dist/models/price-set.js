"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@medusajs/utils");
const core_1 = require("@mikro-orm/core");
const money_amount_1 = __importDefault(require("./money-amount"));
const price_rule_1 = __importDefault(require("./price-rule"));
const price_set_money_amount_1 = __importDefault(require("./price-set-money-amount"));
const price_set_rule_type_1 = __importDefault(require("./price-set-rule-type"));
const rule_type_1 = __importDefault(require("./rule-type"));
let PriceSet = class PriceSet {
    constructor() {
        this.price_set_money_amounts = new core_1.Collection(this);
        this.price_rules = new core_1.Collection(this);
        this.money_amounts = new core_1.Collection(this);
        this.rule_types = new core_1.Collection(this);
    }
    onCreate() {
        this.id = (0, utils_1.generateEntityId)(this.id, "pset");
    }
};
__decorate([
    (0, core_1.PrimaryKey)({ columnType: "text" }),
    __metadata("design:type", String)
], PriceSet.prototype, "id", void 0);
__decorate([
    (0, core_1.OneToMany)(() => price_set_money_amount_1.default, (psma) => psma.price_set, {
        cascade: [core_1.Cascade.REMOVE],
    }),
    __metadata("design:type", Object)
], PriceSet.prototype, "price_set_money_amounts", void 0);
__decorate([
    (0, core_1.OneToMany)(() => price_rule_1.default, (pr) => pr.price_set, {
        cascade: [core_1.Cascade.REMOVE],
    }),
    __metadata("design:type", Object)
], PriceSet.prototype, "price_rules", void 0);
__decorate([
    (0, core_1.ManyToMany)({
        entity: () => money_amount_1.default,
        pivotEntity: () => price_set_money_amount_1.default,
    }),
    __metadata("design:type", Object)
], PriceSet.prototype, "money_amounts", void 0);
__decorate([
    (0, core_1.ManyToMany)({
        entity: () => rule_type_1.default,
        pivotEntity: () => price_set_rule_type_1.default,
        cascade: [core_1.Cascade.REMOVE],
    }),
    __metadata("design:type", Object)
], PriceSet.prototype, "rule_types", void 0);
__decorate([
    (0, core_1.BeforeCreate)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], PriceSet.prototype, "onCreate", null);
PriceSet = __decorate([
    (0, core_1.Entity)()
], PriceSet);
exports.default = PriceSet;
