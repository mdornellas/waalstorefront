"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const DefaultRepositories = __importStar(require("../repositories"));
const _repositories_1 = require("../repositories");
const _services_1 = require("../services");
const awilix_1 = require("awilix");
const utils_1 = require("@medusajs/utils");
exports.default = async ({ container, options, }) => {
    const customRepositories = options?.repositories;
    container.register({
        productModuleService: (0, awilix_1.asClass)(_services_1.ProductModuleService).singleton(),
        productService: (0, awilix_1.asClass)(_services_1.ProductService).singleton(),
        productCategoryService: (0, awilix_1.asClass)(_services_1.ProductCategoryService).singleton(),
        productVariantService: (0, awilix_1.asClass)(_services_1.ProductVariantService).singleton(),
        productTagService: (0, awilix_1.asClass)(_services_1.ProductTagService).singleton(),
        productCollectionService: (0, awilix_1.asClass)(_services_1.ProductCollectionService).singleton(),
        productImageService: (0, awilix_1.asClass)(_services_1.ProductImageService).singleton(),
        productTypeService: (0, awilix_1.asClass)(_services_1.ProductTypeService).singleton(),
        productOptionService: (0, awilix_1.asClass)(_services_1.ProductOptionService).singleton(),
    });
    if (customRepositories) {
        loadCustomRepositories({ customRepositories, container });
    }
    else {
        loadDefaultRepositories({ container });
    }
};
function loadDefaultRepositories({ container }) {
    container.register({
        baseRepository: (0, awilix_1.asClass)(_repositories_1.BaseRepository).singleton(),
        productImageRepository: (0, awilix_1.asClass)(_repositories_1.ProductImageRepository).singleton(),
        productCategoryRepository: (0, awilix_1.asClass)(_repositories_1.ProductCategoryRepository).singleton(),
        productCollectionRepository: (0, awilix_1.asClass)(_repositories_1.ProductCollectionRepository).singleton(),
        productRepository: (0, awilix_1.asClass)(_repositories_1.ProductRepository).singleton(),
        productTagRepository: (0, awilix_1.asClass)(_repositories_1.ProductTagRepository).singleton(),
        productTypeRepository: (0, awilix_1.asClass)(_repositories_1.ProductTypeRepository).singleton(),
        productOptionRepository: (0, awilix_1.asClass)(_repositories_1.ProductOptionRepository).singleton(),
        productVariantRepository: (0, awilix_1.asClass)(_repositories_1.ProductVariantRepository).singleton(),
    });
}
/**
 * Load the repositories from the custom repositories object. If a repository is not
 * present in the custom repositories object, the default repository will be used.
 *
 * @param customRepositories
 * @param container
 */
function loadCustomRepositories({ customRepositories, container }) {
    const customRepositoriesMap = new Map(Object.entries(customRepositories));
    Object.entries(DefaultRepositories).forEach(([key, DefaultRepository]) => {
        let finalRepository = customRepositoriesMap.get(key);
        if (!finalRepository ||
            !finalRepository.prototype.find) {
            finalRepository = DefaultRepository;
        }
        container.register({
            [(0, utils_1.lowerCaseFirst)(key)]: (0, awilix_1.asClass)(finalRepository).singleton(),
        });
    });
}
