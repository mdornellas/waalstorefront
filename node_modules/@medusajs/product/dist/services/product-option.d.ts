import { ProductOption } from "../models";
import { Context, DAL, FindConfig, ProductTypes } from "@medusajs/types";
type InjectedDependencies = {
    productOptionRepository: DAL.RepositoryService;
};
export default class ProductOptionService<TEntity extends ProductOption = ProductOption> {
    protected readonly productOptionRepository_: DAL.RepositoryService;
    constructor({ productOptionRepository }: InjectedDependencies);
    retrieve(productOptionId: string, config?: FindConfig<ProductTypes.ProductOptionDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: ProductTypes.FilterableProductOptionProps, config?: FindConfig<ProductTypes.ProductOptionDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: ProductTypes.FilterableProductOptionProps, config?: FindConfig<ProductTypes.ProductOptionDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    private buildQueryForList;
    create(data: ProductTypes.CreateProductOptionOnlyDTO[], sharedContext?: Context): Promise<TEntity[]>;
    update(data: ProductTypes.UpdateProductOptionDTO[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
    upsert(data: ProductTypes.CreateProductOptionDTO[] | ProductTypes.UpdateProductOptionDTO[], sharedContext?: Context): Promise<TEntity[]>;
}
export {};
