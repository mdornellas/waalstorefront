import { Context, DAL, FindConfig, ProductTypes } from "@medusajs/types";
import { ProductCollection } from "../models";
type InjectedDependencies = {
    productCollectionRepository: DAL.RepositoryService;
};
export default class ProductCollectionService<TEntity extends ProductCollection = ProductCollection> {
    protected readonly productCollectionRepository_: DAL.RepositoryService;
    constructor({ productCollectionRepository }: InjectedDependencies);
    retrieve(productCollectionId: string, config?: FindConfig<ProductTypes.ProductCollectionDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: ProductTypes.FilterableProductCollectionProps, config?: FindConfig<ProductTypes.ProductCollectionDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: ProductTypes.FilterableProductCollectionProps, config?: FindConfig<ProductTypes.ProductCollectionDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    protected buildListQueryOptions(filters?: ProductTypes.FilterableProductCollectionProps, config?: FindConfig<ProductTypes.ProductCollectionDTO>): DAL.FindOptions<ProductCollection>;
    create(data: ProductTypes.CreateProductCollectionDTO[], sharedContext?: Context): Promise<TEntity[]>;
    update(data: ProductTypes.UpdateProductCollectionDTO[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
}
export {};
