"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const _models_1 = require("../models");
const types_1 = require("@medusajs/types");
const utils_1 = require("@medusajs/utils");
class ProductVariantService {
    constructor({ productVariantRepository, productService, }) {
        this.productVariantRepository_ = productVariantRepository;
        this.productService_ = productService;
    }
    async retrieve(productVariantId, config = {}, sharedContext = {}) {
        return (await (0, utils_1.retrieveEntity)({
            id: productVariantId,
            entityName: _models_1.ProductVariant.name,
            repository: this.productVariantRepository_,
            config,
            sharedContext,
        }));
    }
    async list(filters = {}, config = {}, sharedContext = {}) {
        const queryOptions = utils_1.ModulesSdkUtils.buildQuery(filters, config);
        return (await this.productVariantRepository_.find(queryOptions, sharedContext));
    }
    async listAndCount(filters = {}, config = {}, sharedContext = {}) {
        const queryOptions = utils_1.ModulesSdkUtils.buildQuery(filters, config);
        return (await this.productVariantRepository_.findAndCount(queryOptions, sharedContext));
    }
    async create(productOrId, data, sharedContext = {}) {
        let product = productOrId;
        if ((0, utils_1.isString)(productOrId)) {
            product = await this.productService_.retrieve(productOrId, {}, sharedContext);
        }
        let computedRank = product.variants.toArray().length;
        const data_ = [...data];
        data_.forEach((variant) => {
            Object.assign(variant, {
                variant_rank: computedRank++,
                product,
            });
        });
        return (await this.productVariantRepository_.create(data_, {
            transactionManager: sharedContext.transactionManager,
        }));
    }
    async update(productOrId, data, sharedContext = {}) {
        let product = productOrId;
        if ((0, utils_1.isString)(productOrId)) {
            product = await this.productService_.retrieve(productOrId, {}, sharedContext);
        }
        const variantsData = [...data];
        variantsData.forEach((variant) => Object.assign(variant, { product }));
        return (await this.productVariantRepository_.update(variantsData, {
            transactionManager: sharedContext.transactionManager,
        }));
    }
    async delete(ids, sharedContext = {}) {
        return await this.productVariantRepository_.delete(ids, {
            transactionManager: sharedContext.transactionManager,
        });
    }
    async softDelete(ids, sharedContext = {}) {
        await this.productVariantRepository_.softDelete(ids, {
            transactionManager: sharedContext.transactionManager,
        });
    }
    async restore(ids, sharedContext = {}) {
        return await this.productVariantRepository_.restore(ids, {
            transactionManager: sharedContext.transactionManager,
        });
    }
}
exports.default = ProductVariantService;
__decorate([
    (0, utils_1.InjectManager)("productVariantRepository_"),
    __param(2, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Object]),
    __metadata("design:returntype", Promise)
], ProductVariantService.prototype, "retrieve", null);
__decorate([
    (0, utils_1.InjectManager)("productVariantRepository_"),
    __param(2, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object]),
    __metadata("design:returntype", Promise)
], ProductVariantService.prototype, "list", null);
__decorate([
    (0, utils_1.InjectManager)("productVariantRepository_"),
    __param(2, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object]),
    __metadata("design:returntype", Promise)
], ProductVariantService.prototype, "listAndCount", null);
__decorate([
    (0, utils_1.InjectTransactionManager)("productVariantRepository_"),
    __param(2, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Array, Object]),
    __metadata("design:returntype", Promise)
], ProductVariantService.prototype, "create", null);
__decorate([
    (0, utils_1.InjectTransactionManager)("productVariantRepository_"),
    __param(2, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Array, Object]),
    __metadata("design:returntype", Promise)
], ProductVariantService.prototype, "update", null);
__decorate([
    (0, utils_1.InjectTransactionManager)("productVariantRepository_"),
    __param(1, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array, Object]),
    __metadata("design:returntype", Promise)
], ProductVariantService.prototype, "delete", null);
__decorate([
    (0, utils_1.InjectTransactionManager)("productVariantRepository_"),
    __param(1, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array, Object]),
    __metadata("design:returntype", Promise)
], ProductVariantService.prototype, "softDelete", null);
__decorate([
    (0, utils_1.InjectTransactionManager)("productVariantRepository_"),
    __param(1, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array, Object]),
    __metadata("design:returntype", Promise)
], ProductVariantService.prototype, "restore", null);
