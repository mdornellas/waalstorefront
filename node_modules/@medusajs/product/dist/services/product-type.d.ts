import { ProductType } from "../models";
import { Context, CreateProductTypeDTO, DAL, FindConfig, ProductTypes, UpdateProductTypeDTO, UpsertProductTypeDTO } from "@medusajs/types";
type InjectedDependencies = {
    productTypeRepository: DAL.RepositoryService;
};
export default class ProductTypeService<TEntity extends ProductType = ProductType> {
    protected readonly productTypeRepository_: DAL.RepositoryService;
    constructor({ productTypeRepository }: InjectedDependencies);
    retrieve(productTypeId: string, config?: FindConfig<ProductTypes.ProductTypeDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: ProductTypes.FilterableProductTypeProps, config?: FindConfig<ProductTypes.ProductTypeDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: ProductTypes.FilterableProductTypeProps, config?: FindConfig<ProductTypes.ProductTypeDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    private buildQueryForList;
    upsert(types: UpsertProductTypeDTO[], sharedContext?: Context): Promise<TEntity[]>;
    create(data: CreateProductTypeDTO[], sharedContext?: Context): Promise<TEntity[]>;
    update(data: UpdateProductTypeDTO[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
}
export {};
