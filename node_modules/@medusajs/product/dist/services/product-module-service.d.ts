import { Context, DAL, FindConfig, IEventBusModuleService, InternalModuleDeclaration, ModuleJoinerConfig, ProductTypes, RestoreReturn, SoftDeleteReturn } from "@medusajs/types";
import { Image, Product, ProductCategory, ProductCollection, ProductOption, ProductTag, ProductType, ProductVariant } from "../models";
import { ProductCategoryService, ProductCollectionService, ProductOptionService, ProductService, ProductTagService, ProductTypeService, ProductVariantService } from ".";
import ProductImageService from "./product-image";
import { CreateProductCategoryDTO, UpdateProductCategoryDTO } from "../types/services/product-category";
import { LinkableKeys } from "./../joiner-config";
type InjectedDependencies = {
    baseRepository: DAL.RepositoryService;
    productService: ProductService<any>;
    productVariantService: ProductVariantService<any, any>;
    productTagService: ProductTagService<any>;
    productCategoryService: ProductCategoryService<any>;
    productCollectionService: ProductCollectionService<any>;
    productImageService: ProductImageService<any>;
    productTypeService: ProductTypeService<any>;
    productOptionService: ProductOptionService<any>;
    eventBusModuleService?: IEventBusModuleService;
};
export default class ProductModuleService<TProduct extends Product = Product, TProductVariant extends ProductVariant = ProductVariant, TProductTag extends ProductTag = ProductTag, TProductCollection extends ProductCollection = ProductCollection, TProductCategory extends ProductCategory = ProductCategory, TProductImage extends Image = Image, TProductType extends ProductType = ProductType, TProductOption extends ProductOption = ProductOption> implements ProductTypes.IProductModuleService {
    protected readonly moduleDeclaration: InternalModuleDeclaration;
    protected baseRepository_: DAL.RepositoryService;
    protected readonly productService_: ProductService<TProduct>;
    protected readonly productVariantService_: ProductVariantService<TProductVariant, TProduct>;
    protected readonly productCategoryService_: ProductCategoryService<TProductCategory>;
    protected readonly productTagService_: ProductTagService<TProductTag>;
    protected readonly productCollectionService_: ProductCollectionService<TProductCollection>;
    protected readonly productImageService_: ProductImageService<TProductImage>;
    protected readonly productTypeService_: ProductTypeService<TProductType>;
    protected readonly productOptionService_: ProductOptionService<TProductOption>;
    protected readonly eventBusModuleService_?: IEventBusModuleService;
    constructor({ baseRepository, productService, productVariantService, productTagService, productCategoryService, productCollectionService, productImageService, productTypeService, productOptionService, eventBusModuleService, }: InjectedDependencies, moduleDeclaration: InternalModuleDeclaration);
    __joinerConfig(): ModuleJoinerConfig;
    list(filters?: ProductTypes.FilterableProductProps, config?: FindConfig<ProductTypes.ProductDTO>, sharedContext?: Context): Promise<ProductTypes.ProductDTO[]>;
    retrieve(productId: string, config?: FindConfig<ProductTypes.ProductDTO>, sharedContext?: Context): Promise<ProductTypes.ProductDTO>;
    listAndCount(filters?: ProductTypes.FilterableProductProps, config?: FindConfig<ProductTypes.ProductDTO>, sharedContext?: Context): Promise<[ProductTypes.ProductDTO[], number]>;
    retrieveVariant(productVariantId: string, config?: FindConfig<ProductTypes.ProductVariantDTO>, sharedContext?: Context): Promise<ProductTypes.ProductVariantDTO>;
    listVariants(filters?: ProductTypes.FilterableProductVariantProps, config?: FindConfig<ProductTypes.ProductVariantDTO>, sharedContext?: Context): Promise<ProductTypes.ProductVariantDTO[]>;
    listAndCountVariants(filters?: ProductTypes.FilterableProductVariantProps, config?: FindConfig<ProductTypes.ProductVariantDTO>, sharedContext?: Context): Promise<[ProductTypes.ProductVariantDTO[], number]>;
    retrieveTag(tagId: string, config?: FindConfig<ProductTypes.ProductTagDTO>, sharedContext?: Context): Promise<ProductTypes.ProductTagDTO>;
    listTags(filters?: ProductTypes.FilterableProductTagProps, config?: FindConfig<ProductTypes.ProductTagDTO>, sharedContext?: Context): Promise<ProductTypes.ProductTagDTO[]>;
    listAndCountTags(filters?: ProductTypes.FilterableProductTagProps, config?: FindConfig<ProductTypes.ProductTagDTO>, sharedContext?: Context): Promise<[ProductTypes.ProductTagDTO[], number]>;
    createTags(data: ProductTypes.CreateProductTagDTO[], sharedContext?: Context): Promise<any>;
    updateTags(data: ProductTypes.UpdateProductTagDTO[], sharedContext?: Context): Promise<any>;
    deleteTags(productTagIds: string[], sharedContext?: Context): Promise<void>;
    retrieveType(typeId: string, config?: FindConfig<ProductTypes.ProductTypeDTO>, sharedContext?: Context): Promise<ProductTypes.ProductTypeDTO>;
    listTypes(filters?: ProductTypes.FilterableProductTypeProps, config?: FindConfig<ProductTypes.ProductTypeDTO>, sharedContext?: Context): Promise<ProductTypes.ProductTypeDTO[]>;
    listAndCountTypes(filters?: ProductTypes.FilterableProductTypeProps, config?: FindConfig<ProductTypes.ProductTypeDTO>, sharedContext?: Context): Promise<[ProductTypes.ProductTypeDTO[], number]>;
    createTypes(data: ProductTypes.CreateProductTypeDTO[], sharedContext?: Context): Promise<any>;
    updateTypes(data: ProductTypes.UpdateProductTypeDTO[], sharedContext?: Context): Promise<any>;
    deleteTypes(productTypeIds: string[], sharedContext?: Context): Promise<void>;
    retrieveOption(optionId: string, config?: FindConfig<ProductTypes.ProductOptionDTO>, sharedContext?: Context): Promise<ProductTypes.ProductOptionDTO>;
    listOptions(filters?: ProductTypes.FilterableProductTypeProps, config?: FindConfig<ProductTypes.ProductOptionDTO>, sharedContext?: Context): Promise<ProductTypes.ProductOptionDTO[]>;
    listAndCountOptions(filters?: ProductTypes.FilterableProductTypeProps, config?: FindConfig<ProductTypes.ProductOptionDTO>, sharedContext?: Context): Promise<[ProductTypes.ProductOptionDTO[], number]>;
    createOptions(data: ProductTypes.CreateProductOptionDTO[], sharedContext?: Context): Promise<ProductTypes.ProductOptionDTO[]>;
    updateOptions(data: ProductTypes.UpdateProductOptionDTO[], sharedContext?: Context): Promise<ProductTypes.ProductOptionDTO[]>;
    deleteOptions(productOptionIds: string[], sharedContext?: Context): Promise<void>;
    retrieveCollection(productCollectionId: string, config?: FindConfig<ProductTypes.ProductCollectionDTO>, sharedContext?: Context): Promise<ProductTypes.ProductCollectionDTO>;
    listCollections(filters?: ProductTypes.FilterableProductCollectionProps, config?: FindConfig<ProductTypes.ProductCollectionDTO>, sharedContext?: Context): Promise<ProductTypes.ProductCollectionDTO[]>;
    listAndCountCollections(filters?: ProductTypes.FilterableProductCollectionProps, config?: FindConfig<ProductTypes.ProductCollectionDTO>, sharedContext?: Context): Promise<[ProductTypes.ProductCollectionDTO[], number]>;
    createCollections(data: ProductTypes.CreateProductCollectionDTO[], sharedContext?: Context): Promise<any>;
    updateCollections(data: ProductTypes.UpdateProductCollectionDTO[], sharedContext?: Context): Promise<any>;
    deleteCollections(productCollectionIds: string[], sharedContext?: Context): Promise<void>;
    retrieveCategory(productCategoryId: string, config?: FindConfig<ProductTypes.ProductCategoryDTO>, sharedContext?: Context): Promise<ProductTypes.ProductCategoryDTO>;
    listCategories(filters?: ProductTypes.FilterableProductCategoryProps, config?: FindConfig<ProductTypes.ProductCategoryDTO>, sharedContext?: Context): Promise<ProductTypes.ProductCategoryDTO[]>;
    createCategory(data: CreateProductCategoryDTO, sharedContext?: Context): Promise<any>;
    updateCategory(categoryId: string, data: UpdateProductCategoryDTO, sharedContext?: Context): Promise<any>;
    deleteCategory(categoryId: string, sharedContext?: Context): Promise<void>;
    listAndCountCategories(filters?: ProductTypes.FilterableProductCategoryProps, config?: FindConfig<ProductTypes.ProductCategoryDTO>, sharedContext?: Context): Promise<[ProductTypes.ProductCategoryDTO[], number]>;
    create(data: ProductTypes.CreateProductDTO[], sharedContext?: Context): Promise<ProductTypes.ProductDTO[]>;
    update(data: ProductTypes.UpdateProductDTO[], sharedContext?: Context): Promise<ProductTypes.ProductDTO[]>;
    protected create_(data: ProductTypes.CreateProductDTO[], sharedContext?: Context): Promise<TProduct[]>;
    protected update_(data: ProductTypes.UpdateProductDTO[], sharedContext?: Context): Promise<TProduct[]>;
    protected upsertAndAssignOptionsToProductData(productData: ProductTypes.CreateProductDTO | ProductTypes.UpdateProductDTO, sharedContext?: Context): Promise<void>;
    protected upsertAndAssignImagesToProductData(productData: ProductTypes.CreateProductDTO | ProductTypes.UpdateProductDTO, sharedContext?: Context): Promise<void>;
    protected upsertAndAssignProductTagsToProductData(productData: ProductTypes.CreateProductDTO | ProductTypes.UpdateProductDTO, sharedContext?: Context): Promise<void>;
    protected upsertAndAssignProductTypeToProductData(productData: ProductTypes.CreateProductDTO | ProductTypes.UpdateProductDTO, sharedContext?: Context): Promise<void>;
    delete(productIds: string[], sharedContext?: Context): Promise<void>;
    softDelete<TReturnableLinkableKeys extends string = Lowercase<keyof typeof LinkableKeys>>(productIds: string[], { returnLinkableKeys }?: SoftDeleteReturn<TReturnableLinkableKeys>, sharedContext?: Context): Promise<Record<Lowercase<keyof typeof LinkableKeys>, string[]> | void>;
    protected softDelete_(productIds: string[], sharedContext?: Context): Promise<[TProduct[], Record<string, unknown[]>]>;
    restore<TReturnableLinkableKeys extends string = Lowercase<keyof typeof LinkableKeys>>(productIds: string[], { returnLinkableKeys }?: RestoreReturn<TReturnableLinkableKeys>, sharedContext?: Context): Promise<Record<Lowercase<keyof typeof LinkableKeys>, string[]> | void>;
    restoreVariants<TReturnableLinkableKeys extends string = Lowercase<keyof typeof LinkableKeys>>(variantIds: string[], { returnLinkableKeys }?: RestoreReturn<TReturnableLinkableKeys>, sharedContext?: Context): Promise<Record<Lowercase<keyof typeof LinkableKeys>, string[]> | void>;
    restore_(productIds: string[], sharedContext?: Context): Promise<[TProduct[], Record<string, unknown[]>]>;
}
export {};
