"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@medusajs/types");
const utils_1 = require("@medusajs/utils");
class ProductService {
    constructor({ productRepository }) {
        this.productRepository_ = productRepository;
    }
    async retrieve(productId, config = {}, sharedContext = {}) {
        if (!(0, utils_1.isDefined)(productId)) {
            throw new utils_1.MedusaError(utils_1.MedusaError.Types.NOT_FOUND, `"productId" must be defined`);
        }
        const queryOptions = utils_1.ModulesSdkUtils.buildQuery({
            id: productId,
        }, config);
        const product = await this.productRepository_.find(queryOptions, sharedContext);
        if (!product?.length) {
            throw new utils_1.MedusaError(utils_1.MedusaError.Types.NOT_FOUND, `Product with id: ${productId} was not found`);
        }
        return product[0];
    }
    async list(filters = {}, config = {}, sharedContext = {}) {
        if (filters.category_id) {
            if (Array.isArray(filters.category_id)) {
                filters.categories = {
                    id: { $in: filters.category_id },
                };
            }
            else {
                filters.categories = {
                    id: filters.category_id,
                };
            }
            delete filters.category_id;
        }
        const queryOptions = utils_1.ModulesSdkUtils.buildQuery(filters, config);
        return (await this.productRepository_.find(queryOptions, sharedContext));
    }
    async listAndCount(filters = {}, config = {}, sharedContext = {}) {
        if (filters.category_id) {
            if (Array.isArray(filters.category_id)) {
                filters.categories = {
                    id: { $in: filters.category_id },
                };
            }
            else {
                filters.categories = {
                    id: filters.category_id,
                };
            }
            delete filters.category_id;
        }
        const queryOptions = utils_1.ModulesSdkUtils.buildQuery(filters, config);
        return (await this.productRepository_.findAndCount(queryOptions, sharedContext));
    }
    async create(data, sharedContext = {}) {
        data.forEach((product) => {
            product.status ?? (product.status = utils_1.ProductUtils.ProductStatus.DRAFT);
        });
        return (await this.productRepository_.create(data, {
            transactionManager: sharedContext.transactionManager,
        }));
    }
    async update(data, sharedContext = {}) {
        return (await this.productRepository_.update(data, {
            transactionManager: sharedContext.transactionManager,
        }));
    }
    async delete(ids, sharedContext = {}) {
        await this.productRepository_.delete(ids, {
            transactionManager: sharedContext.transactionManager,
        });
    }
    async softDelete(productIds, sharedContext = {}) {
        return await this.productRepository_.softDelete(productIds, {
            transactionManager: sharedContext.transactionManager,
        });
    }
    async restore(productIds, sharedContext = {}) {
        return await this.productRepository_.restore(productIds, {
            transactionManager: sharedContext.transactionManager,
        });
    }
}
exports.default = ProductService;
__decorate([
    (0, utils_1.InjectManager)("productRepository_"),
    __param(2, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Object]),
    __metadata("design:returntype", Promise)
], ProductService.prototype, "retrieve", null);
__decorate([
    (0, utils_1.InjectManager)("productRepository_"),
    __param(2, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object]),
    __metadata("design:returntype", Promise)
], ProductService.prototype, "list", null);
__decorate([
    (0, utils_1.InjectManager)("productRepository_"),
    __param(2, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object]),
    __metadata("design:returntype", Promise)
], ProductService.prototype, "listAndCount", null);
__decorate([
    (0, utils_1.InjectTransactionManager)("productRepository_"),
    __param(1, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array, Object]),
    __metadata("design:returntype", Promise)
], ProductService.prototype, "create", null);
__decorate([
    (0, utils_1.InjectTransactionManager)("productRepository_"),
    __param(1, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array, Object]),
    __metadata("design:returntype", Promise)
], ProductService.prototype, "update", null);
__decorate([
    (0, utils_1.InjectTransactionManager)("productRepository_"),
    __param(1, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array, Object]),
    __metadata("design:returntype", Promise)
], ProductService.prototype, "delete", null);
__decorate([
    (0, utils_1.InjectTransactionManager)("productRepository_"),
    __param(1, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array, Object]),
    __metadata("design:returntype", Promise)
], ProductService.prototype, "softDelete", null);
__decorate([
    (0, utils_1.InjectTransactionManager)("productRepository_"),
    __param(1, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array, Object]),
    __metadata("design:returntype", Promise)
], ProductService.prototype, "restore", null);
