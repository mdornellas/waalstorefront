import { Product, ProductVariant } from "../models";
import { Context, DAL, FindConfig, ProductTypes } from "@medusajs/types";
import { ProductVariantServiceTypes } from "../types/services";
import ProductService from "./product";
type InjectedDependencies = {
    productVariantRepository: DAL.RepositoryService;
    productService: ProductService<any>;
};
export default class ProductVariantService<TEntity extends ProductVariant = ProductVariant, TProduct extends Product = Product> {
    protected readonly productVariantRepository_: DAL.RepositoryService;
    protected readonly productService_: ProductService<TProduct>;
    constructor({ productVariantRepository, productService, }: InjectedDependencies);
    retrieve(productVariantId: string, config?: FindConfig<ProductTypes.ProductVariantDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: ProductTypes.FilterableProductVariantProps, config?: FindConfig<ProductTypes.ProductVariantDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: ProductTypes.FilterableProductVariantProps, config?: FindConfig<ProductTypes.ProductVariantDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    create(productOrId: TProduct | string, data: ProductTypes.CreateProductVariantOnlyDTO[], sharedContext?: Context): Promise<TEntity[]>;
    update(productOrId: TProduct | string, data: ProductVariantServiceTypes.UpdateProductVariantDTO[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
    softDelete(ids: string[], sharedContext?: Context): Promise<void>;
    restore(ids: string[], sharedContext?: Context): Promise<[TEntity[], Record<string, unknown[]>]>;
}
export {};
