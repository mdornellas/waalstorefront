import { ProductTag } from "../models";
import { Context, CreateProductTagDTO, DAL, FindConfig, ProductTypes, UpdateProductTagDTO, UpsertProductTagDTO } from "@medusajs/types";
type InjectedDependencies = {
    productTagRepository: DAL.RepositoryService;
};
export default class ProductTagService<TEntity extends ProductTag = ProductTag> {
    protected readonly productTagRepository_: DAL.RepositoryService;
    constructor({ productTagRepository }: InjectedDependencies);
    retrieve(productTagId: string, config?: FindConfig<ProductTypes.ProductTagDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: ProductTypes.FilterableProductTagProps, config?: FindConfig<ProductTypes.ProductTagDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: ProductTypes.FilterableProductTagProps, config?: FindConfig<ProductTypes.ProductTagDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    private buildQueryForList;
    create(data: CreateProductTagDTO[], sharedContext?: Context): Promise<TEntity[]>;
    update(data: UpdateProductTagDTO[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
    upsert(data: UpsertProductTagDTO[], sharedContext?: Context): Promise<TEntity[]>;
}
export {};
