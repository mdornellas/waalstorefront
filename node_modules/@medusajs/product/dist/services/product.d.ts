import { Context, DAL, FindConfig, ProductTypes } from "@medusajs/types";
import { Product } from "../models";
import { ProductServiceTypes } from "../types/services";
type InjectedDependencies = {
    productRepository: DAL.RepositoryService;
};
export default class ProductService<TEntity extends Product = Product> {
    protected readonly productRepository_: DAL.RepositoryService;
    constructor({ productRepository }: InjectedDependencies);
    retrieve(productId: string, config?: FindConfig<ProductTypes.ProductDTO>, sharedContext?: Context): Promise<TEntity>;
    list(filters?: ProductTypes.FilterableProductProps, config?: FindConfig<ProductTypes.ProductDTO>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount(filters?: ProductTypes.FilterableProductProps, config?: FindConfig<ProductTypes.ProductDTO>, sharedContext?: Context): Promise<[TEntity[], number]>;
    create(data: ProductTypes.CreateProductOnlyDTO[], sharedContext?: Context): Promise<TEntity[]>;
    update(data: ProductServiceTypes.UpdateProductDTO[], sharedContext?: Context): Promise<TEntity[]>;
    delete(ids: string[], sharedContext?: Context): Promise<void>;
    softDelete(productIds: string[], sharedContext?: Context): Promise<[TEntity[], Record<string, unknown[]>]>;
    restore(productIds: string[], sharedContext?: Context): Promise<[TEntity[], Record<string, unknown[]>]>;
}
export {};
