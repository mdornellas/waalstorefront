"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.revertMigration = void 0;
const ProductModels = __importStar(require("../models"));
const utils_1 = require("@medusajs/utils");
/**
 * This script is only valid for mikro orm managers. If a user provide a custom manager
 * he is in charge of reverting the migrations.
 * @param options
 * @param logger
 * @param moduleDeclaration
 */
async function revertMigration({ options, logger, } = {}) {
    logger ?? (logger = console);
    const dbData = utils_1.ModulesSdkUtils.loadDatabaseConfig("product", options);
    const entities = Object.values(ProductModels);
    const pathToMigrations = __dirname + "/../migrations";
    const orm = await utils_1.DALUtils.mikroOrmCreateConnection(dbData, entities, pathToMigrations);
    try {
        const migrator = orm.getMigrator();
        await migrator.down();
        logger?.info("Product module migration executed");
    }
    catch (error) {
        logger?.error(`Product module migration failed to run - Error: ${error}`);
    }
    await orm.close();
}
exports.revertMigration = revertMigration;
