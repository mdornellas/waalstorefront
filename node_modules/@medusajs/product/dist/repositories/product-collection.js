"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductCollectionRepository = void 0;
const utils_1 = require("@medusajs/utils");
const core_1 = require("@mikro-orm/core");
const _models_1 = require("../models");
// eslint-disable-next-line max-len
class ProductCollectionRepository extends utils_1.DALUtils.MikroOrmBaseRepository {
    constructor({ manager }) {
        // @ts-ignore
        // eslint-disable-next-line prefer-rest-params
        super(...arguments);
        this.manager_ = manager;
    }
    async find(findOptions = { where: {} }, context = {}) {
        const manager = this.getActiveManager(context);
        const findOptions_ = { ...findOptions };
        findOptions_.options ?? (findOptions_.options = {});
        Object.assign(findOptions_.options, {
            strategy: core_1.LoadStrategy.SELECT_IN,
        });
        return await manager.find(_models_1.ProductCollection, findOptions_.where, findOptions_.options);
    }
    async findAndCount(findOptions = { where: {} }, context = {}) {
        const manager = this.getActiveManager(context);
        const findOptions_ = { ...findOptions };
        findOptions_.options ?? (findOptions_.options = {});
        Object.assign(findOptions_.options, {
            strategy: core_1.LoadStrategy.SELECT_IN,
        });
        return await manager.findAndCount(_models_1.ProductCollection, findOptions_.where, findOptions_.options);
    }
    async delete(collectionIds, context = {}) {
        const manager = this.getActiveManager(context);
        await manager.nativeDelete(_models_1.ProductCollection, { id: { $in: collectionIds } }, {});
    }
    async create(data, context = {}) {
        const manager = this.getActiveManager(context);
        const productCollections = data.map((collectionData) => {
            if (collectionData.product_ids) {
                collectionData.products = collectionData.product_ids;
                delete collectionData.product_ids;
            }
            return manager.create(_models_1.ProductCollection, collectionData);
        });
        manager.persist(productCollections);
        return productCollections;
    }
    async update(data, context = {}) {
        const manager = this.getActiveManager(context);
        const collectionIds = data.map((collectionData) => collectionData.id);
        const existingCollections = await this.find({
            where: {
                id: {
                    $in: collectionIds,
                },
            },
        }, context);
        const existingCollectionsMap = new Map(existingCollections.map((collection) => [
            collection.id,
            collection,
        ]));
        const productCollections = data.map((collectionData) => {
            const existingCollection = existingCollectionsMap.get(collectionData.id);
            if (!existingCollection) {
                throw new utils_1.MedusaError(utils_1.MedusaError.Types.NOT_FOUND, `ProductCollection with id "${collectionData.id}" not found`);
            }
            if (collectionData.product_ids) {
                collectionData.products = collectionData.product_ids;
                delete collectionData.product_ids;
            }
            return manager.assign(existingCollection, collectionData);
        });
        manager.persist(productCollections);
        return productCollections;
    }
}
exports.ProductCollectionRepository = ProductCollectionRepository;
