"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductTypeRepository = void 0;
const core_1 = require("@mikro-orm/core");
const _models_1 = require("../models");
const utils_1 = require("@medusajs/utils");
class ProductTypeRepository extends utils_1.DALUtils.MikroOrmBaseRepository {
    constructor({ manager }) {
        // @ts-ignore
        // eslint-disable-next-line prefer-rest-params
        super(...arguments);
        this.manager_ = manager;
    }
    async find(findOptions = { where: {} }, context = {}) {
        const manager = this.getActiveManager(context);
        const findOptions_ = { ...findOptions };
        findOptions_.options ?? (findOptions_.options = {});
        Object.assign(findOptions_.options, {
            strategy: core_1.LoadStrategy.SELECT_IN,
        });
        return await manager.find(_models_1.ProductType, findOptions_.where, findOptions_.options);
    }
    async findAndCount(findOptions = { where: {} }, context = {}) {
        const manager = this.getActiveManager(context);
        const findOptions_ = { ...findOptions };
        findOptions_.options ?? (findOptions_.options = {});
        Object.assign(findOptions_.options, {
            strategy: core_1.LoadStrategy.SELECT_IN,
        });
        return await manager.findAndCount(_models_1.ProductType, findOptions_.where, findOptions_.options);
    }
    async upsert(types, context = {}) {
        const manager = this.getActiveManager(context);
        const typesValues = types.map((type) => type.value);
        const existingTypes = await this.find({
            where: {
                value: {
                    $in: typesValues,
                },
            },
        }, context);
        const existingTypesMap = new Map(existingTypes.map((type) => [type.value, type]));
        const upsertedTypes = [];
        const typesToCreate = [];
        const typesToUpdate = [];
        types.forEach((type) => {
            const aType = existingTypesMap.get(type.value);
            if (aType) {
                const updatedType = manager.assign(aType, type);
                typesToUpdate.push(updatedType);
            }
            else {
                const newType = manager.create(_models_1.ProductType, type);
                typesToCreate.push(newType);
            }
        });
        if (typesToCreate.length) {
            manager.persist(typesToCreate);
            upsertedTypes.push(...typesToCreate);
        }
        if (typesToUpdate.length) {
            manager.persist(typesToUpdate);
            upsertedTypes.push(...typesToUpdate);
        }
        return upsertedTypes;
    }
    async delete(ids, context = {}) {
        const manager = this.getActiveManager(context);
        await manager.nativeDelete(_models_1.ProductType, { id: { $in: ids } }, {});
    }
    async create(data, context = {}) {
        const manager = this.getActiveManager(context);
        const productTypes = data.map((typeData) => {
            return manager.create(_models_1.ProductType, typeData);
        });
        manager.persist(productTypes);
        return productTypes;
    }
    async update(data, context = {}) {
        const manager = this.getActiveManager(context);
        const typeIds = data.map((typeData) => typeData.id);
        const existingTypes = await this.find({
            where: {
                id: {
                    $in: typeIds,
                },
            },
        }, context);
        const existingTypesMap = new Map(existingTypes.map((type) => [type.id, type]));
        const productTypes = data.map((typeData) => {
            const existingType = existingTypesMap.get(typeData.id);
            if (!existingType) {
                throw new utils_1.MedusaError(utils_1.MedusaError.Types.NOT_FOUND, `ProductType with id "${typeData.id}" not found`);
            }
            return manager.assign(existingType, typeData);
        });
        manager.persist(productTypes);
        return productTypes;
    }
}
exports.ProductTypeRepository = ProductTypeRepository;
