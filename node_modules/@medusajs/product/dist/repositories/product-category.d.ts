import { ProductCategory } from "../models";
import { Context, DAL, ProductCategoryTransformOptions } from "@medusajs/types";
import { SqlEntityManager } from "@mikro-orm/postgresql";
import { DALUtils } from "@medusajs/utils";
import { ProductCategoryServiceTypes } from "../types";
export type ReorderConditions = {
    targetCategoryId: string;
    originalParentId: string | null;
    targetParentId: string | null | undefined;
    originalRank: number;
    targetRank: number | undefined;
    shouldChangeParent: boolean;
    shouldChangeRank: boolean;
    shouldIncrementRank: boolean;
    shouldDeleteElement: boolean;
};
export declare const tempReorderRank = 99999;
export declare class ProductCategoryRepository extends DALUtils.MikroOrmBaseTreeRepository {
    protected readonly manager_: SqlEntityManager;
    constructor({ manager }: {
        manager: SqlEntityManager;
    });
    find(findOptions?: DAL.FindOptions<ProductCategory>, transformOptions?: ProductCategoryTransformOptions, context?: Context): Promise<ProductCategory[]>;
    buildProductCategoriesWithDescendants(productCategories: ProductCategory[], findOptions?: DAL.FindOptions<ProductCategory>, context?: Context): Promise<ProductCategory[]>;
    findAndCount(findOptions?: DAL.FindOptions<ProductCategory>, transformOptions?: ProductCategoryTransformOptions, context?: Context): Promise<[ProductCategory[], number]>;
    delete(id: string, context?: Context): Promise<void>;
    create(data: ProductCategoryServiceTypes.CreateProductCategoryDTO, context?: Context): Promise<ProductCategory>;
    update(id: string, data: ProductCategoryServiceTypes.UpdateProductCategoryDTO, context?: Context): Promise<ProductCategory>;
    protected fetchReorderConditions(productCategory: ProductCategory, data: ProductCategoryServiceTypes.UpdateProductCategoryDTO, shouldDeleteElement?: boolean): ReorderConditions;
    protected performReordering(manager: SqlEntityManager, conditions: ReorderConditions): Promise<void>;
    protected shiftSiblings(manager: SqlEntityManager, conditions: ReorderConditions): Promise<void>;
}
