import { Context, DAL, ProductTypes } from "@medusajs/types";
import { DALUtils } from "@medusajs/utils";
import { SqlEntityManager } from "@mikro-orm/postgresql";
import { ProductCollection } from "../models";
type UpdateProductCollection = ProductTypes.UpdateProductCollectionDTO & {
    products?: string[];
};
type CreateProductCollection = ProductTypes.CreateProductCollectionDTO & {
    products?: string[];
};
export declare class ProductCollectionRepository extends DALUtils.MikroOrmBaseRepository {
    protected readonly manager_: SqlEntityManager;
    constructor({ manager }: {
        manager: SqlEntityManager;
    });
    find(findOptions?: DAL.FindOptions<ProductCollection>, context?: Context): Promise<ProductCollection[]>;
    findAndCount(findOptions?: DAL.FindOptions<ProductCollection>, context?: Context): Promise<[ProductCollection[], number]>;
    delete(collectionIds: string[], context?: Context): Promise<void>;
    create(data: CreateProductCollection[], context?: Context): Promise<ProductCollection[]>;
    update(data: UpdateProductCollection[], context?: Context): Promise<ProductCollection[]>;
}
export {};
