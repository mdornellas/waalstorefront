"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantRepository = void 0;
const core_1 = require("@mikro-orm/core");
const _models_1 = require("../models");
const utils_1 = require("@medusajs/utils");
// eslint-disable-next-line max-len
class ProductVariantRepository extends utils_1.DALUtils.MikroOrmAbstractBaseRepository {
    constructor({ manager }) {
        // @ts-ignore
        // eslint-disable-next-line prefer-rest-params
        super(...arguments);
        this.manager_ = manager;
    }
    async find(findOptions = { where: {} }, context = {}) {
        const manager = this.getActiveManager(context);
        const findOptions_ = { ...findOptions };
        findOptions_.options ?? (findOptions_.options = {});
        Object.assign(findOptions_.options, {
            strategy: core_1.LoadStrategy.SELECT_IN,
        });
        return await manager.find(_models_1.ProductVariant, findOptions_.where, findOptions_.options);
    }
    async findAndCount(findOptions = { where: {} }, context = {}) {
        const manager = this.getActiveManager(context);
        const findOptions_ = { ...findOptions };
        findOptions_.options ?? (findOptions_.options = {});
        Object.assign(findOptions_.options, {
            strategy: core_1.LoadStrategy.SELECT_IN,
        });
        return await manager.findAndCount(_models_1.ProductVariant, findOptions_.where, findOptions_.options);
    }
    async delete(ids, { transactionManager: manager } = {}) {
        await manager.nativeDelete(_models_1.ProductVariant, { id: { $in: ids } }, {});
    }
    async create(data, context = {}) {
        const manager = this.getActiveManager(context);
        const variants = data.map((variant) => {
            return manager.create(_models_1.ProductVariant, variant);
        });
        manager.persist(variants);
        return variants;
    }
    async update(data, context = {}) {
        const manager = this.getActiveManager(context);
        const productVariantsToUpdate = await manager.find(_models_1.ProductVariant, {
            id: data.map((updateData) => updateData.id),
        });
        const productVariantsToUpdateMap = new Map(productVariantsToUpdate.map((variant) => [variant.id, variant]));
        const variants = data.map((variantData) => {
            const productVariant = productVariantsToUpdateMap.get(variantData.id);
            if (!productVariant) {
                throw new utils_1.MedusaError(utils_1.MedusaError.Types.NOT_FOUND, `ProductVariant with id "${variantData.id}" not found`);
            }
            return manager.assign(productVariant, variantData);
        });
        manager.persist(variants);
        return variants;
    }
}
exports.ProductVariantRepository = ProductVariantRepository;
__decorate([
    (0, utils_1.InjectTransactionManager)(),
    __param(1, (0, utils_1.MedusaContext)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array, Object]),
    __metadata("design:returntype", Promise)
], ProductVariantRepository.prototype, "delete", null);
