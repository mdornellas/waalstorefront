import { RequiredEntityData } from "@mikro-orm/core";
import { ProductVariant } from "../models";
import { Context, DAL, WithRequiredProperty } from "@medusajs/types";
import { SqlEntityManager } from "@mikro-orm/postgresql";
import { DALUtils } from "@medusajs/utils";
import { ProductVariantServiceTypes } from "../types/services";
export declare class ProductVariantRepository extends DALUtils.MikroOrmAbstractBaseRepository<ProductVariant> {
    protected readonly manager_: SqlEntityManager;
    constructor({ manager }: {
        manager: SqlEntityManager;
    });
    find(findOptions?: DAL.FindOptions<ProductVariant>, context?: Context): Promise<ProductVariant[]>;
    findAndCount(findOptions?: DAL.FindOptions<ProductVariant>, context?: Context): Promise<[ProductVariant[], number]>;
    delete(ids: string[], { transactionManager: manager }?: Context): Promise<void>;
    create(data: RequiredEntityData<ProductVariant>[], context?: Context): Promise<ProductVariant[]>;
    update(data: WithRequiredProperty<ProductVariantServiceTypes.UpdateProductVariantDTO, "id">[], context?: Context): Promise<ProductVariant[]>;
}
