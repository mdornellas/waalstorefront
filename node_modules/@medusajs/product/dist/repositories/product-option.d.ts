import { Context, DAL, ProductTypes } from "@medusajs/types";
import { DALUtils } from "@medusajs/utils";
import { SqlEntityManager } from "@mikro-orm/postgresql";
import { ProductOption } from "../models";
export declare class ProductOptionRepository extends DALUtils.MikroOrmAbstractBaseRepository<ProductOption> {
    protected readonly manager_: SqlEntityManager;
    constructor({ manager }: {
        manager: SqlEntityManager;
    });
    find(findOptions?: DAL.FindOptions<ProductOption>, context?: Context): Promise<ProductOption[]>;
    findAndCount(findOptions?: DAL.FindOptions<ProductOption>, context?: Context): Promise<[ProductOption[], number]>;
    delete(ids: string[], context?: Context): Promise<void>;
    create(data: ProductTypes.CreateProductOptionDTO[], context?: Context): Promise<ProductOption[]>;
    update(data: ProductTypes.UpdateProductOptionDTO[], context?: Context): Promise<ProductOption[]>;
    upsert(data: ProductTypes.CreateProductOptionDTO[] | ProductTypes.UpdateProductOptionDTO[], context?: Context): Promise<ProductOption[]>;
}
